#!/bin/bash

# Smart compiler wrapper that uses g++ for C++ files and gcc for C files
# Debug log
echo "gcc-wrapper called with: $@" >> /tmp/gcc-wrapper-debug.log
# First, identify if this is a C or C++ file
has_cpp_file=false
has_c_file=false
has_cpp_flags=false
has_zlib_file=false

for arg in "$@"; do
    case "$arg" in
        *.cc|*.cpp|*.cxx|*.C)
            has_cpp_file=true
            ;;
        *.c)
            # Only treat as C file if it's not actually .cc or .cpp
            if [[ "$arg" != *.cc && "$arg" != *.cpp ]]; then
                has_c_file=true
            fi
            # Check if this is a zlib file that needs special handling
            if [[ "$arg" == *"third_party/zlib"* ]]; then
                has_zlib_file=true
            fi
            ;;
        -stdlib=libc++|-std=c++*)
            has_cpp_flags=true
            ;;
    esac
done

# If we have a C++ file, definitely use g++
if [ "$has_cpp_file" = true ]; then
    echo "Using /opt/homebrew/bin/g++-12 for C++ file" >> /tmp/gcc-wrapper-debug.log
    exec /opt/homebrew/bin/g++-12 "$@"
fi

# If we have C++ flags but it's a .c file, decide compiler based on file type
if [ "$has_cpp_flags" = true ] && [ "$has_c_file" = true ]; then
    # For zlib files, use real g++ to handle macro conflicts better
    if [ "$has_zlib_file" = true ]; then
        echo "Using /opt/homebrew/bin/g++-12 for zlib C file to handle macro conflicts: $@" >> /tmp/gcc-wrapper-debug.log
        exec /opt/homebrew/bin/g++-12 "$@"
    else
        # Filter out C++ specific flags for regular C files
        filtered_args=()
        for arg in "$@"; do
            case "$arg" in
                -stdlib=libc++|-std=c++*)
                    # Skip C++ specific flags when compiling C files
                    ;;
                *)
                    filtered_args+=("$arg")
                    ;;
            esac
        done
        
        echo "Using gcc with filtered args for C file with C++ flags: ${filtered_args[@]}" >> /tmp/gcc-wrapper-debug.log
        exec gcc "${filtered_args[@]}"
    fi
fi

# If we have C++ flags but no clear file extension, use g++
if [ "$has_cpp_flags" = true ]; then
    echo "Using /opt/homebrew/bin/g++-12 for C++ flags without clear file type" >> /tmp/gcc-wrapper-debug.log
    exec /opt/homebrew/bin/g++-12 "$@"
fi

# Default to gcc for C files or unclear cases
# Zlib fix disabled for now
echo "Using gcc for default case: $@" >> /tmp/gcc-wrapper-debug.log
exec gcc "$@"